What happens when you initialize a repository? Why do you need to do it?

    It creates the .git folder and tells Git to start keeping track of the files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    It lets us package the content we want to commit while allowing us to work on unfinished ideas or files.

How can you use the staging area to make sure you have one commit per logical
change?

    We can compare the staging area with the repository to see what changes will be made in this commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    When testing experimental features, branches can be useful. You don't have to worry about breaking anything.
    Branches can help create separate versions for different individuals to work on independently.

How do the diagrams help you visualize the branch structure?

    The diagrams help me to see how Git keeps track of the branch tips and what commits matter.
    It makes it clearer what is going on when I run git log to see a branch's history.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    Merging creates a new commit which keeps track of the histories of two branches.
    The new commit has both branches as parents so it makes sense to draw arrows to the two parent branches that were merged.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

    Pros: Convenience. Git can zipper together edits that don't conflict.
    Cons: Sometimes will get it wrong, or call attention to some changes but not others.
    Less control-- have to be careful about what goes into a commit (git diff useful here).
